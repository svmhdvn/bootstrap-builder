#!/bin/sh
set -ex

to_kernconf() {
    awk '{printf("MY%s\n", toupper($1))}'
}

# TODO handle signatures on pkg repos
print_poudriere_repo_conf() {
    printf 'poudriere_%s: {\n  url: "file://%s"\n  enabled: yes\n}\n' "$1" "$2"
}

print_freebsd_repo_conf() {
    cat <<EOF
FreeBSD: {
  url: "pkg+https://pkg.freebsd.org/$${ABI}/latest",
  mirror_type: "srv",
  signature_type: "fingerprints",
  fingerprints: "/usr/share/keys/pkg",
  enabled: "no"
}
EOF
}

sync_confs() {
    doas cp \
    	"$target_confdir/$target_hostname-common-make.conf" \
    	"$poudriere_etc/$target_hostname-make.conf"
    doas cp \
    	"$target_confdir/$target_hostname-src-env.conf" \
	"$poudriere_etc"
}

pull_freebsd_src() {
    if test ! -d /usr/src/.git; then
        doas git clone \
            --origin upstream \
            --branch "$freebsd_branch" \
            https://git.freebsd.org/src.git /usr/src
    fi
    doas git -C /usr/src pull upstream "$freebsd_branch" --rebase --autostash
}

pull_freebsd_ports() {
    # TODO setup a downstream EMPT ports repo and rebase from upstream here
    if test ! -d /usr/ports/.git; then
        doas git clone \
            --origin upstream \
            https://git.freebsd.org/ports.git /usr/ports
        doas poudriere ports -c -p "$ports_tree" -m null -M /usr/ports
    fi
    doas git -C /usr/ports pull upstream main --autostash --rebase
    doas mkdir -p /usr/ports/distfiles
}

# TODO find a cleaner way to do this
# Instructions from https://wiki.freebsd.org/PkgBase
local_pkgbase_upgrade() {
    # NOTE needs to maintain root for the entirety of this command to avoid
    # obliterating the /etc/passwd file
    doas sh -c "
env ABI=$target_abi IGNORE_OSVERSION=yes pkg install -y -r poudriere_pkgbase -g 'FreeBSD-*'
if test -r /etc/master.passwd.pkgsave || test -r /etc/group.pkgsave; then
    cp /etc/master.passwd.pkgsave /etc/master.passwd || true
    cp /etc/group.pkgsave /etc/group || true
    pwd_mkdb -p /etc/master.passwd
fi
cp /etc/sysctl.conf.pkgsave /etc/sysctl.conf || true
"

    doas find / -name '*.pkgsave' | \
        sort | \
    	awk 'BEGIN {print "Leftover .pkgsave files (delete after double checking):"} {print}' | \
    	less
    doas rm -f /boot/kernel/linker.hints
}

build_host_pkgbase() {
    pull_freebsd_src
    sync_confs
    grep '^[a-z]' "$target_confdir/${target_kernconf}_LINT" \
    	| sort -u \
    	| tee "$target_confdir/$target_kernconf" \
    	| doas tee "/usr/src/sys/$target_arch/conf/$target_kernconf" > /dev/null

    doas cp \
    	"$target_confdir/$target_hostname-host-src.conf" \
    	"$poudriere_etc/$host_pkgbase_builder-src.conf"

    # If the jail already exists, upgrade and build the new pkgbase set.
    # Otherwise, create the jail.
    if poudriere jail -l -n -q | grep -q "^${host_pkgbase_builder}\$"; then
        doas poudriere jail -u -j "$host_pkgbase_builder" -b -z "$target_hostname"
    else
        doas poudriere jail -c -j "$host_pkgbase_builder" -b -m src=/usr/src -B -K "$target_kernconf" -z "$target_hostname"
    fi
}

build_jail_pkgbase() {
    pull_freebsd_src

    # TODO file upstream bug to figure out the order of target dependencies
    # between 'buildworld' and the stage/create/sign targets
    # For now, use two make invocations
    # TODO file upstream bug for pkgversion issues
    _pkgversion="$freebsd_major_version.snap$(date -u +%Y%m%d%H%M%S)"
    doas make -C /usr/src -j"$(nproc)" \
        __MAKE_CONF="$target_confdir/$target_hostname-common-make.conf" \
        SRCCONF="$target_confdir/$target_hostname-jail-src.conf" \
        SRC_ENV_CONF="$target_confdir/$target_hostname-src-env.conf" \
        buildworld

    doas make -C /usr/src \
        __MAKE_CONF="$target_confdir/$target_hostname-common-make.conf" \
        SRCCONF="$target_confdir/$target_hostname-jail-src.conf" \
        SRC_ENV_CONF="$target_confdir/$target_hostname-src-env.conf" \
        REPODIR="$poudriere_data/images/$jail_pkgbase_builder-repo" \
        PKG_VERSION="$_pkgversion" \
        stage-packages-world create-packages-world sign-packages
}

poudriere_options() {
    pull_freebsd_ports
    sync_confs

    if test ! -d "$poudriere_portoptions" && test -d "$my_portoptions"; then
        doas cp -R "$my_portoptions" "$poudriere_portoptions"
    fi

    # Only use our portoptions make.conf for options directory creation. This
    # prevents the defaults from overriding the options directory during a
    # poudriere bulk run.
    doas cp \
        "$target_confdir/$target_hostname-portoptions-make.conf" \
        "$poudriere_etc/$ports_tree-$target_hostname-make.conf"
    doas poudriere options -j "$ports_builder" -p "$ports_tree" -z "$target_hostname" -f "$ports_pkglist"
    doas rm -f "$poudriere_etc/$ports_tree-$target_hostname-make.conf"

    # Treat the poudriere_etc options directory as the ground truth.
    rm -rf "$my_portoptions"
    cp -R "$poudriere_portoptions" "$my_portoptions"
}

poudriere_bulk() {
    doas poudriere bulk -j "$ports_builder" -p "$ports_tree" -z "$target_hostname" -f "$ports_pkglist"
    doas poudriere pkgclean -y -j "$ports_builder" -p "$ports_tree" -z "$target_hostname" -f "$ports_pkglist"
    mkdir -p tarballs
    tar -C "$ports_repo/.latest" -cvf "tarballs/${target_hostname}-ports.tar.zst" --zstd --strip-components 1 .
}

bootstrap_step1() {
    # NOTES:
    # Must run with the following conditions:
    # * as root (with doas is fine)
    # * on a freshly-installed FreeBSD 14.0-RELEASE system
    # * inside the git repo
    #
    # REQUIRED PKGS BEFORE BOOTSTRAP:
    # * doas (configured with 'permit nopass :wheel')

    # 1) install required packages from upstream mirror
    doas pkg install -y git poudriere ccache

    # 2) setup poudriere
    # TODO change ccache directory to a better global location, possibly /var/cache/ccache
    # NOTE add back if needed to the sed command:
    #   -e 's/.*TMPFS_BLACKLIST=.*/TMPFS_BLACKLIST="ghc* llvm* rust*"/' \
    #   -e 's%.*TMPFS_BLACKLIST_TMPDIR=.*%TMPFS_BLACKLIST_TMPDIR="${BASEFS}/data/cache/tmp"%' \
    sed \
        -e "s/.*BUILDER_HOSTNAME=.*/BUILDER_HOSTNAME=poudriere.home.arpa/" \
        -e 's%.*CCACHE_DIR=.*%CCACHE_DIR=/root/.ccache%' \
        -e 's/.*ALLOW_MAKE_JOBS=.*/ALLOW_MAKE_JOBS=yes/' \
        -e 's/.*BAD_PKGNAME_DEPS_ARE_FATAL=.*/BAD_PKGNAME_DEPS_ARE_FATAL=yes/' \
        -e 's/.*NOLINUX=.*/NOLINUX=yes/' \
        -e 's/.*PACKAGE_FETCH_BRANCH=.*/PACKAGE_FETCH_BRANCH=latest/' \
        -e 's/.*PACKAGE_FETCH_WHITELIST=.*/PACKAGE_FETCH_WHITELIST="gcc* rust ghc llvm*"/' \
        -e 's/.*PRIORITY_BOOST=.*/PRIORITY_BOOST="curl"/' \
        -e 's/.*SAVE_WRKDIR=.*/SAVE_WRKDIR="yes"/' \
        -e 's/.*WRKDIR_ARCHIVE_FORMAT=.*/WRKDIR_ARCHIVE_FORMAT=tzst/' \
        -e 's/.*ZPOOL=.*/ZPOOL=zroot/' \
        /usr/local/etc/poudriere.conf.sample \
        | doas tee /usr/local/etc/poudriere.conf > /dev/null

    # 3) build system pkgbase
    doas kldload -n filemon
    build_host_pkgbase

    # 4) convert system into a pkgbase installation
    doas mkdir -p /usr/local/etc/pkg/repos
    print_poudriere_repo_conf pkgbase "$host_pkgbase_repo" | doas tee /usr/local/etc/pkg/repos/poudriere_pkgbase.conf > /dev/null

    doas pkg install -y -r poudriere_pkgbase -g 'FreeBSD-*'
    post_pkgbase_upgrade
}

bootstrap_step2() {
    # 5) build ports
    poudriere_options
    poudriere_bulk

    # 6) reinstall all system pkgs with the new poudriere repo
    print_poudriere_repo_conf ports "$ports_repo" | doas tee /usr/local/etc/pkg/repos/poudriere_ports.conf > /dev/null
    print_freebsd_repo_conf | doas tee /usr/local/etc/pkg/repos/FreeBSD.conf > /dev/null

    doas pkg upgrade -y -r poudriere_ports -f
}

top="$(cd "$(dirname "$0")" && pwd)"
readonly top

freebsd_major_version=15
readonly freebsd_major_version

freebsd_minor_version=0
readonly freebsd_minor_version

freebsd_branch="main"
readonly freebsd_branch

# NOTE support other architectures when the need arises
target_arch="$(uname -p)"
readonly target_arch

target_abi="FreeBSD:$freebsd_major_version:$target_arch"
readonly target_abi

# NOTE use this to determine a system's CPUTYPE, then add it to a make.conf
# inside the hosts/ directory
#cputype="$(cc -v -x c -E -march=native /dev/null 2>&1 | sed -n 's/.*-target-cpu *\([^ ]*\).*/\1/p')"

poudriere_etc=/usr/local/etc/poudriere.d
readonly poudriere_etc

poudriere_data=/usr/local/poudriere/data
readonly poudriere_data

# TODO change to a more descriptive name, like "empt_ports" or something
ports_tree=default
readonly ports_tree

target_hostname="${2:-$(hostname)}"
readonly target_hostname

target_confdir="$top/hosts/$target_hostname"
readonly target_confdir

target_kernconf="$(echo "$target_hostname" | to_kernconf)"
readonly target_kernconf

host_pkgbase_builder="h${freebsd_major_version}${target_kernconf}"
readonly host_pkgbase_builder

jail_pkgbase_builder="j${freebsd_major_version}${target_kernconf}"
readonly jail_pkgbase_builder

# TODO pkg-static is unfortunately built as part of ports-mgmt/pkg. This means
# that the builder jail's base system libraries get statically linked into
# the binary. The builder jail uses a different CPUTYPE than the target, so we
# run into SIGILL illegal instruction crashes. We need to figure this out
# properly.
# NOTE to avoid this, we build all packages using the default upstream RELEASE
# jail instead of the custom host
# jail (even though we really should build using the host jail for maximum building performance).
#builder_kernconf="$(echo "$builder_hostname" | to_kernconf)"
#readonly builder_kernconf
#ports_builder="poudriere_${freebsd_branch}_${builder_kernconf}"
if test "$(hostname)" = "$target_hostname"; then
    ports_builder="$host_pkgbase_builder"
else
    ports_builder="r${freebsd_major_version}${freebsd_minor_version}${target_arch}"
fi
readonly ports_builder

host_pkgbase_repo="$poudriere_data/images/$host_pkgbase_builder-repo/$target_abi/latest"
readonly host_pkgbase_repo

jail_pkgbase_repo="$poudriere_data/images/$jail_pkgbase_builder-repo/$target_abi/latest"
readonly jail_pkgbase_repo

ports_repo="$poudriere_data/packages/$ports_builder-$ports_tree-$target_hostname"
readonly ports_repo

poudriere_portoptions="$poudriere_etc/$ports_builder-$ports_tree-$target_hostname-options"
readonly poudriere_portoptions

my_portoptions="$target_confdir/portoptions"
readonly my_portoptions

case "$target_hostname" in
  beastie|n100m*)
    ports_pkglist=pkglist-builder.txt
    ;;
  cl100*|wyse*)
    ports_pkglist=pkglist-empt.txt
    ;;
  arpvps*)
    ports_pkglist=pkglist-arpvps.txt
    ;;
  *)
    echo "unsupported target host: $target_hostname" >&2
    echo "usage: $0 <command> <hostname>" >&2
    exit 1
esac
readonly ports_pkglist

case "$1" in
  bootstrap1)
    bootstrap_step1
    ;;
  bootstrap2)
    bootstrap_step2
    ;;
  upgrade1)
    build_host_pkgbase
    local_pkgbase_upgrade
    ;;
  upgrade2)
    poudriere_options
    poudriere_bulk
    doas pkg upgrade -y -r poudriere_ports
    ;;
  upgrade_builder)
    # TODO this comment doesn't make sense.
    # If the jail already exists, upgrade to latest upstream image.
    # Otherwise, create the jail.
    if poudriere jail -l -n -q | grep -q "^${ports_builder}\$"; then
        # TODO figure out the right builder jail update strategy
        doas poudriere jail -y -d -j "$ports_builder"
        #poudriere jail -u -j "$ports_builder"
    fi
    doas poudriere jail -c -j "$ports_builder" -v "${freebsd_major_version}.${freebsd_minor_version}-CURRENT"
    ;;
  host_pkgbase)
    build_host_pkgbase
    mkdir -p tarballs
    tar -C "$host_pkgbase_repo" -cvf "tarballs/$target_hostname-host-pkgbase.tar.zst" --zstd --strip-components 1 .
    ;;
  jail_pkgbase)
    build_jail_pkgbase
    mkdir -p tarballs
    tar -C "$jail_pkgbase_repo" -cvf "tarballs/$target_hostname-jail-pkgbase.tar.zst" --zstd --strip-components 1 .
    ;;
  options)
    poudriere_options
    ;;
  bulk)
    poudriere_bulk
    ;;
  hostconfig)
    make -C /usr/src \
        __MAKE_CONF="$target_confdir/$target_hostname-common-make.conf" \
        SRCCONF="$target_confdir/$target_hostname-host-src.conf" \
        SRC_ENV_CONF="$target_confdir/$target_hostname-src-env.conf" \
        showconfig
    ;;
  jailconfig)
    make -C /usr/src \
        __MAKE_CONF="$target_confdir/$target_hostname-common-make.conf" \
        SRCCONF="$target_confdir/$target_hostname-jail-src.conf" \
        SRC_ENV_CONF="$target_confdir/$target_hostname-src-env.conf" \
        showconfig
    ;;
  ports)
    poudriere_options
    poudriere_bulk
    ;;
  destroy)
    doas poudriere jail -d -j "$host_pkgbase_builder" -C all -y || true
    doas poudriere jail -d -j "$jail_pkgbase_builder" -C all -y || true
    doas rm -f \
        "$poudriere_etc/$target_hostname"-*.conf \
        "$poudriere_etc/$ports_tree-$target_hostname"-*.conf \
        "$poudriere_etc/$host_pkgbase_builder"-*.conf \
        "$poudriere_etc/$jail_pkgbase_builder"-*.conf

    doas rm -rf \
        "$poudriere_portoptions" \
        "$poudriere_data/images/$host_pkgbase_builder-repo" \
        "$poudriere_data/images/$jail_pkgbase_builder-repo" \
        "$ports_repo"
    rm -f tarballs/"$target_hostname"-*.tar.zst
    ;;
  *)
    echo "unsupported command: $1" >&2
    exit 1
    ;;
esac
